// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hopbox

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HopboxClient is the client API for Hopbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HopboxClient interface {
	Hop(ctx context.Context, in *HopRequest, opts ...grpc.CallOption) (*HopResponse, error)
}

type hopboxClient struct {
	cc grpc.ClientConnInterface
}

func NewHopboxClient(cc grpc.ClientConnInterface) HopboxClient {
	return &hopboxClient{cc}
}

func (c *hopboxClient) Hop(ctx context.Context, in *HopRequest, opts ...grpc.CallOption) (*HopResponse, error) {
	out := new(HopResponse)
	err := c.cc.Invoke(ctx, "/hopbox.Hopbox/Hop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HopboxServer is the server API for Hopbox service.
// All implementations must embed UnimplementedHopboxServer
// for forward compatibility
type HopboxServer interface {
	Hop(context.Context, *HopRequest) (*HopResponse, error)
	mustEmbedUnimplementedHopboxServer()
}

// UnimplementedHopboxServer must be embedded to have forward compatible implementations.
type UnimplementedHopboxServer struct {
}

func (UnimplementedHopboxServer) Hop(context.Context, *HopRequest) (*HopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hop not implemented")
}
func (UnimplementedHopboxServer) mustEmbedUnimplementedHopboxServer() {}

// UnsafeHopboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HopboxServer will
// result in compilation errors.
type UnsafeHopboxServer interface {
	mustEmbedUnimplementedHopboxServer()
}

func RegisterHopboxServer(s grpc.ServiceRegistrar, srv HopboxServer) {
	s.RegisterService(&Hopbox_ServiceDesc, srv)
}

func _Hopbox_Hop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HopboxServer).Hop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hopbox.Hopbox/Hop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HopboxServer).Hop(ctx, req.(*HopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hopbox_ServiceDesc is the grpc.ServiceDesc for Hopbox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hopbox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hopbox.Hopbox",
	HandlerType: (*HopboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hop",
			Handler:    _Hopbox_Hop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hopbox/hopbox.proto",
}
