// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package box

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoxClient is the client API for Box service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoxClient interface {
	Hop(ctx context.Context, in *HopRequest, opts ...grpc.CallOption) (*HopResponse, error)
}

type boxClient struct {
	cc grpc.ClientConnInterface
}

func NewBoxClient(cc grpc.ClientConnInterface) BoxClient {
	return &boxClient{cc}
}

func (c *boxClient) Hop(ctx context.Context, in *HopRequest, opts ...grpc.CallOption) (*HopResponse, error) {
	out := new(HopResponse)
	err := c.cc.Invoke(ctx, "/box.Box/Hop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoxServer is the server API for Box service.
// All implementations must embed UnimplementedBoxServer
// for forward compatibility
type BoxServer interface {
	Hop(context.Context, *HopRequest) (*HopResponse, error)
	mustEmbedUnimplementedBoxServer()
}

// UnimplementedBoxServer must be embedded to have forward compatible implementations.
type UnimplementedBoxServer struct {
}

func (UnimplementedBoxServer) Hop(context.Context, *HopRequest) (*HopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hop not implemented")
}
func (UnimplementedBoxServer) mustEmbedUnimplementedBoxServer() {}

// UnsafeBoxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoxServer will
// result in compilation errors.
type UnsafeBoxServer interface {
	mustEmbedUnimplementedBoxServer()
}

func RegisterBoxServer(s grpc.ServiceRegistrar, srv BoxServer) {
	s.RegisterService(&Box_ServiceDesc, srv)
}

func _Box_Hop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxServer).Hop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/box.Box/Hop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxServer).Hop(ctx, req.(*HopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Box_ServiceDesc is the grpc.ServiceDesc for Box service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Box_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "box.Box",
	HandlerType: (*BoxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hop",
			Handler:    _Box_Hop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "box/box.proto",
}
